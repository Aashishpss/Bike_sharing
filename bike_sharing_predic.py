# -*- coding: utf-8 -*-
"""Bike_sharing-predic.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SCJELl_HTAt864qorUzVRFqkq_tW60v0
"""

import warnings
warnings.filterwarnings("ignore")

"""**Data understanding**"""

import pandas as pd
import numpy as np

dataset=pd.read_csv('/content/BoomBikes.csv')
dataset.head()

dataset.shape

dataset.columns

dataset.describe()

dataset.info()

# Assingning different values to diff season

dataset["season"]=dataset["season"].map({1:"spring",2:"summer",3:"fall",4:" winter"})
dataset

dataset["season"].astype("category").value_counts()

# 0-->2018 , 1-->2019
dataset["yr"].astype("category").value_counts()

dataset["mnth"]=dataset["mnth"].map({1:"Jan",2:"Feb",3:"Mar",4:" Apr",5:"May",6:"Jun",7:"Jul",8:"Aug",9:"Sep",10:"Oct",11:"Novem",12:"Dec"})
dataset

dataset["mnth"].astype("category").value_counts()

dataset["holiday"].astype("category").value_counts()

dataset["weekday"]=dataset["weekday"].map({1:"Mon",2:"Tues",3:"Wed",4:"Thurs",5:"Fri",6:"Sar",0:"Sun"})
dataset

dataset.info()

dataset["weekday"].astype("category").value_counts()

dataset["workingday"].astype("category").value_counts()

dataset["weathersit"]=dataset["weathersit"].map({1:"A",2:"B",3:"C"})
dataset["weathersit"].astype("category").value_counts()

"""***Data Visualisation***"""

import matplotlib.pyplot as plt
import seaborn as sns

sns.distplot(dataset['temp'])

sns.distplot(dataset['atemp'])
plt.show()

sns.distplot(dataset['windspeed'])

# target variable : total rental bikes
sns.distplot(dataset['cnt'])

# converting date to date and time format
dataset['dteday'] = pd.to_datetime(dataset['dteday'], format='%d-%m-%Y')

dataset_categorical= dataset.select_dtypes(exclude=['float64','datetime64','int64'])

dataset_categorical.columns

plt.figure(figsize=(20,20))
plt.subplot(3,3,1)
sns.boxplot(x='season',y='cnt',data=dataset)
plt.subplot(3,3,2)
sns.boxplot(x='mnth',y='cnt',data=dataset)
plt.subplot(3,3,3)
sns.boxplot(x='weekday',y='cnt',data=dataset)
plt.subplot(3,3,4)
sns.boxplot(x='weathersit',y='cnt',data=dataset)
plt.subplot(3,3,5)
sns.boxplot(x='workingday',y='cnt',data=dataset)
plt.subplot(3,3,6)
sns.boxplot(x='yr',y='cnt',data=dataset)
plt.subplot(3,3,7)
sns.boxplot(x='holiday',y='cnt',data=dataset)
plt.show()

list=["casual","registered","cnt"]
for i in list:
  dataset[i]=dataset[i].astype("float")

dataset_numeric= dataset.select_dtypes(include=['float64'])
dataset_numeric.head()

sns.pairplot(dataset_numeric)
plt.show()

cor=dataset_numeric.corr()
cor

mask=np.array(cor)
mask[np.tril_indices_from(mask)]= False
fig,ax=plt.subplots()
fig.set_size_inches(10,10)
sns.heatmap(cor,mask=mask,vmax=1,square= True, annot= True)

# removing atmep as it is highly correlated with temp
dataset.drop('atemp',axis=1,inplace=True)
dataset.head()

"""# Data Preparation"""

dataset_categorical= dataset.select_dtypes(include=["object"])
dataset_categorical.head()

dataset_dumies= pd.get_dummies(dataset_categorical,drop_first= True)
dataset_dumies.head()

# drop categorical variables column
dataset= dataset.drop((dataset_categorical.columns),axis=1)
dataset

# concatenate dummies variables with the dataset
dataset=pd.concat([dataset,dataset_dumies],axis=1)
dataset.head()

dataset= dataset.drop(['instant','dteday'],axis=1,inplace=False)
dataset.head()

li = ["season_fall", "  season_spring  ", "  season_summer", "mnth_Aug ", "  mnth_Dec ", " mnth_Feb", "  mnth_Jan ", "  mnth_Jul  ", " mnth_Jun  ", "  mnth_Mar  ", "mnth_May ", "mnth_Novem ", "mnth_Oct", " mnth_Sep", "weekday_Mon", "weekday_Sar", "weekday_Sun", " weekday_Thurs", "weekday_Tues", "weekday_Wed", "weathersit_B ", "weathersit_C  "]

for i in li:
    column_name = i.strip()  # Remove leading and trailing whitespaces
    if column_name in dataset.columns:
        dataset[column_name] = dataset[column_name].astype("int")
    else:
        print(f"Column '{column_name}' not found in the dataset.")

"""# Building models

"""

from sklearn import linear_model
from sklearn.linear_model import LinearRegression

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler

np.random.seed(0)
df_train,df_test= train_test_split(dataset,train_size=0.7,test_size=0.3,random_state=50)

scaler=MinMaxScaler()
#applying scaler to all column except dummy variable
va=["temp","hum","windspeed","casual","registered","cnt"]
df_train[va]=scaler.fit_transform(df_train[va])
df_train.describe()

plt.figure(figsize=(30,30))
sns.heatmap(df_train.corr(),annot=True,cmap="YlGnBu")
plt.show()

#dividing ingo x and y
y_train=df_train.pop("cnt")
x_train =df_train.drop(["casual","registered"],axis=1)

x_train.head()

dataset.info()

#np.array(x_train)

import statsmodels.api as sm
x_train_lm= sm.add_constant(x_train)
lr= sm.OLS(y_train,x_train_lm).fit()
lr.params

lm =LinearRegression()
lm.fit(x_train,y_train)

print(lm.coef_)
print(lm.intercept_)

lr.summary()

from sklearn.feature_selection import RFE

lm= LinearRegression()
rfe1 = RFE(estimator=lm, n_features_to_select=15)

rfe1.fit(x_train,y_train)
print(rfe1.support_)
print(rfe1.ranking_)

col1=x_train.columns[rfe1.support_]

col1

x_train_rfe1=x_train[col1]
x_train_rfe1= sm.add_constant(x_train_rfe1)
lm1= sm.OLS(y_train,x_train_rfe1).fit()
lm1.summary()

from statsmodels.stats.outliers_influence import variance_inflation_factor

a= x_train_rfe1.drop('const',axis=1)

# Evaluating VIF's
vlf= pd.DataFrame()
vlf['features']=a.columns
vlf['VIF']=[variance_inflation_factor(a.values,i)for i in range(a.shape[1])]
vlf['VIF']=round(vlf['VIF'],2)
vlf=vlf.sort_values(by="VIF",ascending=False)
vlf

lm= LinearRegression()
rfe2 = RFE(estimator=lm, n_features_to_select=7)

rfe2.fit(x_train,y_train)
print(rfe2.support_)
print(rfe2.ranking_)

col2=x_train.columns[rfe2.support_]
x_train_rfe2=x_train[col2]
x_train_rfe2= sm.add_constant(x_train_rfe2)
lm2= sm.OLS(y_train,x_train_rfe2).fit()
lm2.summary()

y_train_cnt=lm2.predict(x_train_rfe2)

fig=plt.figure()
sns.distplot((y_train,y_train_cnt),bins=20)

df_test[va]=scaler.transform(df_test[va])
y_test=df_test.pop('cnt')
x_test=df_test.drop(["casual","registered"],axis=1)

x_test.head()

c= x_train_rfe2.drop('const',axis=1)

cols2=c.columns

x_test_rfe2= x_test[col2]
x_test_rfe2=sm.add_constant(x_test_rfe2)
x_test_rfe2.info()

y_predic= lm2.predict(x_test_rfe2)
plt.figure()
plt.scatter(y_test,y_predic)

from sklearn.metrics import r2_score
r2_score(y_test,y_predic)

plt.figure(figsize=(8,5))
sns.heatmap(dataset[col2].corr(),cmap="YlGnBu",annot=True)
plt.show()

